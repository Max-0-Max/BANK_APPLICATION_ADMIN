  CREATE TABLE "MAXWELL_CUSTOM_USERS" 
   (	"USER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"PASSWORD_HASH" VARCHAR2(200) NOT NULL ENABLE, 
	"ROLE" VARCHAR2(30), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"IS_ACTIVE" VARCHAR2(3) DEFAULT 'Y' -- 'Y' or 'N'
, 
	 PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("USERNAME")
  USING INDEX  ENABLE
   ) ;
create or replace FUNCTION get_user_role(p_username IN VARCHAR2)
RETURN VARCHAR2
IS
  v_role VARCHAR2(30);
BEGIN
  SELECT role 
    INTO v_role
    FROM maxwell_custom_users
   WHERE username = p_username;

  RETURN v_role;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;  -- or raise an error or return a default role
  WHEN OTHERS THEN
    RAISE;
END get_user_role;
/
create or replace FUNCTION maxwell_get_user_role(p_username IN VARCHAR2)
RETURN VARCHAR2
IS
  v_role VARCHAR2(30);
BEGIN
  SELECT role 
    INTO v_role
    FROM maxwell_custom_users
   WHERE username = p_username;

  RETURN v_role;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN NULL;  -- or raise an error or return a default role
  WHEN OTHERS THEN
    RAISE;
END maxwell_get_user_role;
/
create or replace FUNCTION max_custom_auth (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) RETURN BOOLEAN IS
    l_hash      VARCHAR2(200);
    l_input_raw RAW(2000);
    l_hash_raw  RAW(2000);
BEGIN
    SELECT password_hash
    INTO l_hash
    FROM maxwell_custom_users
    WHERE username = p_username AND is_active = 'Y';

    -- Convert password to RAW and hash using DBMS_CRYPTO
    l_input_raw := UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8');
    l_hash_raw := DBMS_CRYPTO.HASH(l_input_raw, DBMS_CRYPTO.HASH_SH256); -- or HASH_MD5, HASH_SH1 etc.

    RETURN RAWTOHEX(l_hash_raw) = l_hash;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
END;
/
create or replace FUNCTION validate_transfer(
    p_transfer_type        IN VARCHAR2,
    p_account_number_from  IN VARCHAR2,
    p_account_number_to    IN VARCHAR2
) RETURN VARCHAR2
IS
    v_from_customer_id maxwell_accounts.customer_id%TYPE;
    v_to_customer_id   maxwell_accounts.customer_id%TYPE;
    v_from_currency    maxwell_accounts.currency_code%TYPE;
    v_to_currency      maxwell_accounts.currency_code%TYPE;
BEGIN
    -- Fetch source account info
    SELECT customer_id, currency_code
    INTO v_from_customer_id, v_from_currency
    FROM maxwell_accounts
    WHERE account_number = p_account_number_from;

    -- Fetch target account info
    SELECT customer_id, currency_code
    INTO v_to_customer_id, v_to_currency
    FROM maxwell_accounts
    WHERE account_number = p_account_number_to;

    -- Check currency code matches
    IF v_from_currency != v_to_currency THEN
        RETURN 'Validation failed: Currency codes do not match.';
    END IF;

    -- Check transfer type constraints
    IF p_transfer_type = 'INTRA' THEN
        IF v_from_customer_id != v_to_customer_id THEN
            RETURN 'Validation failed: For INTRA transfers, accounts must belong to the same customer.';
        END IF;
    ELSIF p_transfer_type = 'INTER' THEN
        IF v_from_customer_id = v_to_customer_id THEN
            RETURN 'Validation failed: For INTER transfers, accounts must belong to different customers.';
        END IF;
    ELSE
        RETURN 'Validation failed: Invalid transfer type specified.';
    END IF;

    RETURN 'Validation successful.';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Validation failed: One or both account numbers do not exist.';
    WHEN OTHERS THEN
        RETURN 'Validation failed: ' || SQLERRM;
END validate_transfer;
/























 